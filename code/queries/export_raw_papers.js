/*
## Summary
Export a set of raw papers from COKI's DOI table to a GCS bucket

## Contacts
julian.tonti-filippini@curtin.edu.au

## License
Apache 2.0
*/
const compile = ({
  project = "",
  dataset = "",
  version = "",
  doi_table = "",
  start = 1900,
  finish = 2100,
  replace = false,
}) => `
-- generated by: ${require("path").basename(__filename)}
BEGIN 
  ${replace ? "CREATE OR REPLACE TABLE" : "CREATE TABLE IF NOT EXISTS"} \`${project}.${dataset}.raw_papers${version}\` AS (
    SELECT 
      doi,
      year_published AS year,
      num_citations AS cits,
      is_oa,
      output_type AS type,
      issns,
      rors
    FROM (
      SELECT
        IFNULL(doi,'') AS doi,
        IFNULL(openalex.publication_year,
          IFNULL(crossref.published_year,
            IFNULL(unpaywall.year, -1)
          )
        ) AS year_published,
        
        GREATEST(
          IFNULL(openalex.cited_by_count,0),
          IFNULL(crossref.is_referenced_by_count,0),
          IFNULL(open_citations.citations_total,0),
          0
        ) AS num_citations,
        
        IFNULL(unpaywall.is_oa,false) AS is_oa,

        CASE 
          WHEN openalex.type   = 'article'         THEN 'journal-article'
          WHEN crossref.type   = 'journal-article' THEN 'journal-article'
          WHEN unpaywall.genre = 'journal-article' THEN 'journal-article'
          ELSE ''
        END AS output_type,

        ARRAY(
          SELECT DISTINCT issn FROM UNNEST(
            ARRAY_CONCAT(
              IF(crossref.ISSN IS NULL, ARRAY<STRING>[], crossref.ISSN), -- array
              IF(openalex.primary_location.source.issn IS NULL, ARRAY<STRING>[], openalex.primary_location.source.issn), -- array
              IF(unpaywall.journal_issn_l IS NULL OR unpaywall.journal_issn_l = '', ARRAY<STRING>[], [ unpaywall.journal_issn_l ]), -- single
              IF(openalex.primary_location.source.issn_l IS NULL OR openalex.primary_location.source.issn_l = '', ARRAY<STRING>[], [ openalex.primary_location.source.issn_l ]), -- single
              ARRAY<STRING>[]
            )
          ) AS issn WHERE issn IS NOT NULL AND issn != ''
        ) AS issns,

        IF(affiliations IS NULL OR affiliations.institutions IS NULL,
          ARRAY<STRING>[],
          ARRAY(SELECT DISTINCT inst.identifier FROM UNNEST(affiliations.institutions) AS inst WHERE inst IS NOT NULL AND inst.identifier IS NOT NULL)
        ) AS rors,

      FROM \`${doi_table}\` 
    )
    WHERE (
      doi IS NOT NULL AND doi != ''       -- must be an identified paper
      AND output_type = 'journal-article' -- must be a journal article
      AND ARRAY_LENGTH(rors) > 0          -- must have at least one institutional affiliation
      AND ARRAY_LENGTH(issns) > 0         -- must have at least one journal linkage
      AND year_published >= ${start}          -- must be published in or after this year
      AND year_published <= ${finish}          -- must be published in or before this year
    )
  );
    ALTER TABLE \`${project}.${dataset}.raw_papers${version}\` SET OPTIONS(description="Extract of publication metadata from the COKI database");
    ALTER TABLE ${project}.${dataset}.raw_papers${version}
    ALTER COLUMN doi SET OPTIONS (description = "Digital Object Identifier for the publication"),
    ALTER COLUMN year SET OPTIONS (description = "Year of publication"),
    ALTER COLUMN cits SET OPTIONS (description = "Number of accumulated citations to date"),
    ALTER COLUMN is_oa SET OPTIONS (description = "True if the publication is recorded as Open Access"),
    ALTER COLUMN type SET OPTIONS (description = "The type of the publication, currently only contains journal-articles"),
    ALTER COLUMN issns SET OPTIONS (description = "List of ISSNs for the journal associated with this publication"),
    ALTER COLUMN rors SET OPTIONS (description = "List of ROR codes for institutions affiliated with this publication");
      
END;
`;
// EXPORT DATA OPTIONS (
//   uri         = 'gs://${project}-ries/tables/raw_papers/data*.jsonl.gz',
//   format      = 'JSON',
//   overwrite   = ${replace},
//   compression = 'GZIP'
// ) AS SELECT * FROM papers;
const compile_all = (args = {}) => [compile(args)];
module.exports = { compile, compile_all };
if (require.main === module) require("app").cli_compile(compile_all);
