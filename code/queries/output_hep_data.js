/* Create a json file of outputs to upload to the RIES app.

Current workflow is to run this in the BQ console, and save output as a JSONL file in the data folder of the ries-app local repo.

Then run the export_institution.js to generate the outputs.sql file that is uploaded to cloudflare.

*/
const { check_hep_code } = require("../libraries/lib_checks");
function compile_automatic({ project = "", version = "" }) {
  return ` -- generated by: ${require("path").basename(__filename)}
WITH
results AS (
    SELECT "fors" AS classification, * FROM ${project}.ries_fors.heps_outputs${version}
    UNION ALL
    SELECT "foes" AS classification, * FROM ${project}.ries_foes.heps_outputs${version}
)
  
SELECT
    hep_code,
    classification,
    assignment,
    doi,
    openalex_id,
    journal_era_id,
    journal_title,
    paper_title,
    -- LIMIT 100 here because some papers have 1000s of authors that break the .sql loading
    ARRAY(SELECT authors FROM UNNEST(authors) as authors LIMIT 100) as authors,
    ARRAY(SELECT hep_authors FROM UNNEST(hep_authors) as hep_authors LIMIT 100) as inst_authors,
    ARRAY(SELECT apportionment FROM UNNEST(apportionment) as apportionment LIMIT 100) as apportionment,
    * EXCEPT (
        hep_code,
        classification,
        assignment,
        doi,
        openalex_id,
        journal_era_id,
        journal_title,
        paper_title,
        authors,
        hep_authors,
        apportionment
      )
FROM
  results`;
}

function compile_institutional({ project = "", version = "", hep_code = "" }) {
  check_hep_code(hep_code);
  return `-- generated by: ${require("path").basename(__filename)}
WITH
results AS (
    SELECT "fors" AS classification, * FROM ${project}.ries_fors_${hep_code}_institutional_outputs.heps_outputs${version}
    UNION ALL
    SELECT "foes" AS classification, * FROM ${project}.ries_foes_${hep_code}_institutional_outputs.heps_outputs${version}
    )
SELECT
    inst,
    classification,
    assignment,
    doi,
    openalex_id,
    journal_era_id,
    journal_title,
    paper_title,
    ARRAY(SELECT authors FROM UNNEST(authors) as authors LIMIT 100) as authors,
    ARRAY(SELECT hep_authors FROM UNNEST(hep_authors) as hep_authors LIMIT 100) as inst_authors,
    ARRAY(SELECT apportionment FROM UNNEST(apportionment) as apportionment LIMIT 100) as apportionment,
    * EXCEPT (
        inst,
        classification,
        assignment,
        doi,
        openalex_id,
        journal_era_id,
        journal_title,
        paper_title,
        authors,
        hep_authors,
        apportionment
      )
FROM
  results`;
}

module.exports = { compile_institutional, compile_automatic };
if (require.main === module) {
  let conf = require("../app").conf;
  console.log(compile_automatic(conf));
}
