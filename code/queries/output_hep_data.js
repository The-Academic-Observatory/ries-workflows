/* 
A query to extract the hep outputs 

If no heps are supplied, retrieves data from all heps

Otherwise, will retrieve output from the supplied heps

*/

function compile({ for_table = "", foe_table = "", heps = [] }) {
  // Filter on the input heps if necessary
  let hep_selection = "";
  if (heps != null && heps.length > 0) {
    const instList = heps.map((hep) => `"${hep}"`);
    hep_selection = `WHERE inst IN (${instList.join(", ")})`;
  }

  return ` -- generated by: ${require("path").basename(__filename)}
WITH
results AS (
    SELECT * FROM ${for_table}
    UNION ALL
    SELECT * FROM ${foe_table}
)
  
SELECT
    doi,
    inst,
    assignment,
    classification,
    -- LIMIT 100 here because some papers have 1000s of authors that break the .sql loading
    ARRAY(SELECT institutions FROM UNNEST(institutions) as institutions LIMIT 100) as institutions,
    ARRAY(SELECT authors FROM UNNEST(authors) as authors LIMIT 100) as authors,
    ARRAY(SELECT inst_authors FROM UNNEST(inst_authors) as inst_authors LIMIT 100) as inst_authors,
    ARRAY(SELECT apportionment FROM UNNEST(apportionment) as apportionment LIMIT 100) as apportionment,
    * EXCEPT (
        doi,
        inst,
        assignment,
        classification,
        institutions,
        authors,
        inst_authors,
        apportionment
      )
FROM
  results
${hep_selection};
`;
}

module.exports = { compile };
if (require.main === module) {
  let conf = require("../app").conf();
  console.log(conf);
  console.log(
    compile({
      for_table: `${conf.project}.ries_fors.heps_outputs${conf.version}`,
      foe_table: `${conf.project}.ries_foes.heps_outputs${conf.version}`,
      heps: conf.output_heps_filter,
    }),
  );
}
