/*
## Summary
Compiles CPP benchmarks for calculating the RCI (relative citation impact) indicator.

## Description
Method: https://github.com/Curtin-Open-Knowledge-Initiative/coki-ries/blob/main/docs/era_2018.md#indicator-relative-citation-impact-rci

## Contacts
julian.tonti-filippini@curtin.edu.au

## License
Apache 2.0

## Requires
table core_papers

## Creates
table benchmarks_cpp_*

*/
const compile = ({
  project = "",
  dataset = "",
  scope = "world",
  digits = 4,
  replace = false,
  version = "",
}) => `
-- generated by: ${require("path").basename(__filename)}
BEGIN
  -- compute CPP (citation per paper) benchmarks [${scope},${digits}]
  ${replace ? "CREATE OR REPLACE TABLE" : "CREATE TABLE IF NOT EXISTS"} \`${project}.${dataset}.benchmarks_cpp_${scope}_${digits}_${version}\` AS (
    SELECT 
      SUBSTRING(B.code,0,${digits})        AS code,
      year_published                       AS year,
      COUNT(1)                             AS num_papers,
      COUNTIF(num_citations > 0)           AS num_cited,
      COUNTIF(num_citations = 0)           AS num_uncited,
      SUM(num_citations)                   AS sum_citations,
      MAX(num_citations)                   AS max_citations,
      AVG(num_citations)                   AS avg_citations,
      STDDEV(num_citations)                AS sdev_citations,
      0.0                                  AS std_error,
      0.0                                  AS coeff_variation,
      EXP(AVG(LN(num_citations + 0.1)))    AS logcits_avg,
      EXP(STDDEV(LN(num_citations + 0.1))) AS logcits_sdev,
      0.0                                  AS logcits_serr,
      0.0                                  AS logcits_cvar,
      0.0                                  AS benchmark,
      FALSE                                AS flagged,

      -- Arithmetic Measures
      AVG(num_citations)    AS a_mean,
      STDDEV(num_citations) AS a_sdev,
      0.0                   AS a_serr,
      0.0                   AS a_cvar,
      
      -- Geometric Measures
      EXP(AVG(LN(GREATEST(num_citations, 1))))    AS g_mean,
      EXP(STDDEV(LN(GREATEST(num_citations, 1)))) AS g_sdev,
      0.0                                         AS g_serr,
      0.0                                         AS g_cvar

    FROM \`${project}.${dataset}.core_papers${version}\` AS A
    INNER JOIN UNNEST(fors) AS B 
    WHERE LENGTH(B.code) >= ${digits} ${scope == "local" ? "AND ARRAY_LENGTH(heps) > 0" : ""}
    GROUP BY code,year 
    ORDER BY code,year
  );
  UPDATE \`${project}.${dataset}.benchmarks_cpp_${scope}_${digits}_${version}\` SET 
    benchmark       = sum_citations / num_papers,
    std_error       = sdev_citations / SQRT(num_papers),
    coeff_variation = IF(avg_citations = 0 , 0.0, sdev_citations / avg_citations),
    logcits_serr    = EXP(LN(logcits_sdev) / SQRT(num_papers)),
    logcits_cvar    = IF(logcits_avg = 0 OR logcits_avg IS NULL, 0.0, logcits_sdev / logcits_avg),
    
    -- Arithmetic
    a_serr = a_sdev / SQRT(num_papers),
    a_cvar = IF(a_mean = 0, 0.0, a_sdev / a_mean),
    
    -- Geometric 
    g_serr = g_sdev / SQRT(num_papers),
    g_cvar = IF(g_mean = 0, 0.0, POW(g_sdev, 1/g_mean)) -- see: https://www.thinkingapplied.com/cov_folder/geo_cov.htm
  WHERE num_papers > 0;
  UPDATE \`${project}.${dataset}.benchmarks_cpp_${scope}_${digits}_${version}\` SET 
    flagged = (coeff_variation >= 0.05 OR coeff_variation = 0.0)
  WHERE TRUE;
END;`;
function compile_all(args = {}) {
  return [
    compile({ ...args, scope: "world", digits: 4 }),
    compile({ ...args, scope: "world", digits: 2 }),
    compile({ ...args, scope: "local", digits: 4 }),
    compile({ ...args, scope: "local", digits: 2 }),
  ];
}
module.exports = { compile, compile_all };
if (require.main === module) require("app").cli_compile(compile_all);

const compile2 = ({
  project = "",
  dataset = "",
  replace = false,
  version = "20240801",
}) => `
-- generated by: ${require("path").basename(__filename)}
BEGIN
  -- compute CPP (citation per paper) benchmarks
  ${replace ? "CREATE OR REPLACE TABLE" : "CREATE TABLE IF NOT EXISTS"} \`${project}.${dataset}.benchmarks_cpp${version}\` AS (
    SELECT 
      B.code                        AS code,
      year_published                AS year,
      COUNT(1)                      AS num_papers,
      COUNTIF(num_citations > 0)    AS num_cited,
      COUNTIF(num_citations = 0)    AS num_uncited,
      SUM(num_citations)            AS sum_citations,
      MAX(num_citations)            AS max_citations,
      AVG(num_citations)            AS avg_citations,
      STDDEV(num_citations)         AS sdev_citations,
      0.0                           AS benchmark
    FROM \`${project}.${dataset}.core_papers${version}\` AS A
    INNER JOIN UNNEST(concs) AS B 
    GROUP BY conc,year 
    ORDER BY conc,year
  );
  UPDATE \`${project}.${dataset}.benchmarks_cpp${version}\` SET benchmark = sum_citations / num_papers WHERE num_papers > 0;
END;`;
