/*
## Summary
Run all compile scripts, according to a configuration script.

## Description
This compiler assumes that ETL scripts (telescopes) have already been run so that raw datasets are
ready to be imported into the BigQuery database. It will run through the entire build process for 
the RIES database and replace any tables that are missing.

It will NOT overwrite existing tables. To rebuild the entire RIES database from scratch, delete the 
existing dataset in advance, or specify a new dataset name in the config (see /conf/README).

## Contacts
julian.tonti-filippini@curtin.edu.au

## License
Apache 2.0
*/
const {
  check_assignment,
  check_field,
  check_string,
  check_hep_code,
} = require("../libraries/lib_checks");

// Compiles the ries database queries into a string of sql
const compile_all = (
  conf = {
    project: "",
    dataset: "",
    version: "",
    replace: true,
    start: 2011,
    finish: 2022,
    hep_code: null,
    assignment: "",
    field: "",
    doi_table: "",
  },
) => {
  // Some basic checks for valid input
  if (conf.hep_code) {
    check_hep_code(conf.hep_code);
    console.log(`Compiling for institutional HEP: ${conf.hep_code}`);
  }
  check_assignment(conf.assignment);
  check_field(conf.field);
  check_string(conf.project);
  check_string(conf.dataset);
  check_string(conf.version);
  check_string(conf.doi_table);
  return [
    `
-------------------------------------------------------------------------------
-- WARNING: this batch file is compiled automatically. Any changes you make  --
-- here will be overwritten on the next compilation. If a permanent change   --
-- is required then edit the source files in the /code/queries/ directory.   --
-------------------------------------------------------------------------------
-- generated by: ${require("path").basename(__filename)}
CREATE SCHEMA IF NOT EXISTS \`${conf.project}.${conf.dataset}\`;
`,
    // raw tables
    require("../queries/import_raw_rors").compile(conf), // research organisations from ror.org
    require("../queries/import_raw_issns").compile(conf), // ISSN-ISSNL mapping from issn.org
    require("../queries/import_raw_heps").compile(conf), // list of HEPs defined by the ARC for ERA
    require("../queries/import_raw_history").compile(conf), // historical ERA results from the ARC
    require("../queries/import_raw_fors").compile(conf), // concepts from ANZSRC
    require("../queries/import_raw_journals").compile(conf), // journal list from the ARC for ERA
    require("../queries/export_raw_papers").compile(conf), // publications from the COKI DOI table

    // core tables
    require("../queries/core_rors").compile(conf), // finalised institutions to be used in the run
    require("../queries/core_heps").compile(conf), // filtered set of institutions (Australian HEPs)
    require("../queries/core_fors").compile(conf), // finalised set of concepts to be used in the run
    require("../queries/core_journals").compile(conf), // list of journals used to filter works and assign concepts
    require("../queries/core_papers").compile(conf), // finalised works to be used in the run
    require("../queries/core_assignments").compile(conf), // the atomic unit for the analysis pipeline

    // inject the UNE modification at this point
    conf.hep_code === "UNE" && conf.assignment === "institutional"
      ? require("../queries/inject_une_fors").compile({
          ...conf,
          une_version: "20240611",
        })
      : "",

    // modify for-data into foe-data if applicable
    conf.field === "foes"
      ? require("../queries/translate_fors_to_foes").compile(conf)
      : "", // copies raw and core tables. Modified work->concept mappings

    // benchmarks
    require("../queries/benchmark_outputs").compile_all(conf).join(""), // research outputs by (inst) (conc) (year) (inst,conc) (inst,year) (conc,year) (inst,conc,year)
    require("../queries/benchmark_cpp").compile_all(conf).join(""), // CPP benchmarks
    require("../queries/benchmark_centiles").compile_all(conf).join(""), // CPP centile boundaries
    require("../queries/benchmark_hpi").compile_all(conf).join(""), // HPI benchmarks
    require("../queries/benchmark_rci_papers").compile_all(conf).join(""), // assigns RCI values to each paper (depends on CPP benchmarks)
    require("../queries/benchmark_rci").compile_all(conf).join(""), // now that individual papers have RCI values, calculate RCI benchmarks
    require("../queries/benchmark_rci_groups").compile_all(conf).join(""), // RCI groupings by (inst) (conc) (year) (inst,conc) (inst,year) (conc,year) (inst,conc,year)
    require("../queries/benchmark_rci_classes").compile_all(conf).join(""), // assign RCI classes to papers and fields, then build a summary (TODO: refactor into more groupings (as above))
    require("../queries/benchmark_summary").compile_all(conf).join(""), // summary table of all benchmarks

    // indicators
    require("../queries/ind_low_volume").compile_all(conf).join(""), // low volume threshold
    require("../queries/ind_interdisc").compile_all(conf).join(""), // interdisciplinary profiles
    require("../queries/ind_ratings").compile_all(conf).join(""), // TODO: NOT IMPLEMENTED YET // ERA ratings estimation

    // reports
    require("../queries/report_heps").compile_all(conf).join(""), // builds heps tables for the dashboard
    require("../queries/heps_outputs").compile(conf), // outputs of each hep
    require("../queries/create_gui_table").compile_all(conf).join(""), // this table is used for the HEP dashboard
  ];
};
module.exports = compile_all;
if (require.main === module) require("../app").cli_compile(module.exports);
